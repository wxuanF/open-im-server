# Copyright Â© 2023 OpenIM open source community. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


name: OpenIM CI Aotu Build and Install

on: 
  push:
    branches:
        - main
        - release-*
    paths-ignore:
        - "docs/**"
        - "README.md"
        - "README_zh-CN.md"
        - "**.md"
        - "docs/**"
        - "CONTRIBUTING.md"
  pull_request:
    branches:
        - main
        - release-*
    paths-ignore:
        - "README.md"
        - "README_zh-CN.md"
        - "CONTRIBUTING/**"
        - "**.md"
        - "docs/**"

env:
  GO_VERSION: "1.19"
  GOLANGCI_VERSION: "v1.50.1"

jobs:
  execute-scripts:
    name: Execute OpenIM Script On ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    permissions:
        contents: write
        pull-requests: write
    environment:
      name: openim
    strategy:
      matrix:
        go_version: ["1.21"]
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        arch: [arm64, armv7, amd64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go_version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go_version }}
      id: go

    - name: Install Task
      uses: arduino/setup-task@v1
      with:
        version: '3.x' # If available, use the latest major version that's compatible
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    # - name: Install latest Bash (macOS only)
    #   if: runner.os == 'macOS' && matrix.arch == 'arm64'
    #   run: |
    #     /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    #     brew update
    
    #     brew install bash
    #     brew install gnu-sed
    
    #     echo "/usr/local/bin" >> $GITHUB_PATH
    #     echo "$(brew --prefix)/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH
    #   continue-on-error: true

    - name: Set up Docker for Ubuntu
      run: |
        sudo docker compose up -d
        sudo sleep 20

    # - name: Set up Docker for macOS
    #   if: runner.os == 'macOS' && matrix.arch == 'arm64'
    #   run: |
    #     brew install --cask docker
    #     open /Applications/Docker.app

    #     sleep 10
    #     docker-compose --version || brew install docker-compose

    #     docker-compose up -d
    #     sleep 20

    - name: Module Operations 
      run: sudo go mod tidy

    - name: init for linux&&macOS
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: sudo bash bootstrap.sh

    - name: init for window
    - if: runner.os == 'windows'
    - run: bootstrap.bat

    - name: Build, Start, Check Services and Print Logs for Ubuntu
      run: |
        sudo mage
        sudo mage start
        sudo mage check
        
    - name: Restart Services and Print Logs 
      run: |
        sudo mage stop
        sudo mage start
        sudo mage check
